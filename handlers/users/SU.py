from datetime import datetime
from pathlib import Path
import pytz
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InputFile, ContentTypes

from keyboards.inline.SU_kb import main_SU_kb, select_users_SU_kb, SU_msg_language_kb, SU_to_main_kb, SU_accept_send_kb, \
    SU_via_age_kb
from loader import dp, bot
from states.states import SU
from utils.db_api import quick_commands as qc
import xlsxwriter


@dp.message_handler(text="SU", state='*')
async def def_name(message: types.Message, state: FSMContext):
    if int(message.from_user.id) in (312241087, 1028997010):
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=main_SU_kb)
    else:
        await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    await state.finish()


@dp.callback_query_handler(text="SU", state='*')
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    if int(call.from_user.id) in (312241087, 1028997010):
        await call.message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=main_SU_kb)
    else:
        await call.message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    await state.finish()


@dp.callback_query_handler(text="su_send_msg")
async def def_mame(call: types.CallbackQuery):
    await call.message.edit_text(f"–ö–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?\n"
                                 f"\n"
                                 f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä", reply_markup=select_users_SU_kb)


@dp.callback_query_handler(text="excel_all")
async def def_mame(call: types.CallbackQuery):
    msg = await call.message.edit_text(f"–¢–∞–±–ª–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
                                       f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ")
    users = await qc.select_all_users()
    print(users)
    # workbook = xlsxwriter.Workbook('C:/Users/Cortana/Desktop/commercialbots/goroskop_backup/all_users.xlsx')
    dir_path = Path.cwd()
    document = Path(dir_path, "all_users.xlsx")
    workbook = xlsxwriter.Workbook(document)
    worksheet = workbook.add_worksheet()
    worksheet.write(0, 0, 'id —é–∑–µ—Ä–∞')
    worksheet.write(0, 1, '–ò–º—è')
    worksheet.write(0, 2, '–Æ–∑–µ—Ä–Ω–µ–π–º')
    worksheet.write(0, 3, '–Ø–∑—ã–∫')
    worksheet.write(0, 4, '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å')
    worksheet.write(0, 5, '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
    worksheet.write(0, 6, '–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è')
    worksheet.write(0, 7, '–ü–æ–ª')
    worksheet.write(0, 8, '–†–µ—Ñ–µ—Ä—Ä–∞–ª')
    worksheet.write(0, 9, '–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
    worksheet.write(0, 10, '–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞')
    worksheet.write(0, 11, '–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (UTC-0)')
    worksheet.write(0, 12, '–ü–µ—á–µ–Ω–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    worksheet.write(0, 13, '–ö–∞–∫–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –ø—Ä–∏—Ö–æ–¥—è—Ç')
    worksheet.write(0, 14, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è')
    worksheet.write(0, 14, '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–¥')
    row = 1
    col = 0
    for user in users:
        worksheet.write(row, col, f"{user.id}")
        col += 1
        worksheet.write(row, col, f"{user.fullname}")
        col += 1
        worksheet.write(row, col, f"{user.username}")
        col += 1
        worksheet.write(row, col, f"{user.language}")
        col += 1
        worksheet.write(row, col, f"{user.time_zone}")
        col += 1
        worksheet.write(row, col, f"{user.birthday}")
        col += 1
        worksheet.write(row, col, f"{user.time_birthday}")
        col += 1
        worksheet.write(row, col, f"{user.sex}")
        col += 1
        worksheet.write(row, col, f"{user.referral}")
        col += 1
        worksheet.write(row, col, f"{user.notify_time}")
        col += 1
        worksheet.write(row, col, f"{user.zodiac}")
        col += 1
        worksheet.write(row, col, f"{user.moscow_time}")
        col += 1
        worksheet.write(row, col, f"{user.prediction}")
        col += 1
        worksheet.write(row, col, f"{user.notify_horo}")
        col += 1
        worksheet.write(row, col, f"{user.created_at}")
        col += 1
        worksheet.write(row, col, f"{user.updated_at}")
        row += 1
        col = 0
    workbook.close()
    now = datetime.now(pytz.timezone("europe/moscow"))
    date = now.strftime("%d.%m.%Y %H:%M:%S")
    await call.message.answer_document(
        # document=InputFile("C:/Users/Cortana/Desktop/commercialbots/goroskop_backup/all_users.xlsx"),
        document=InputFile(f"{document}"),
        caption=f"–¢–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î –Ω–∞\n"
                f"{date} (UTC+3)")
    await msg.delete()
    await call.message.answer(f"–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=main_SU_kb)


@dp.callback_query_handler(text="SU_msg_date")
async def def_mame(call: types.CallbackQuery):
    total_users = await qc.count_users()
    total_male = await qc.count_users_sex(sex="Male")
    total_female = await qc.count_users_sex(sex="Female")
    total_ru = await qc.count_users_language(language="ru")
    total_ru_m = await qc.count_users_sex_language(sex="Male", language="ru")
    total_ru_f = await qc.count_users_sex_language(sex="Female", language="ru")
    total_en = await qc.count_users_language(language="en")
    total_en_m = await qc.count_users_sex_language(sex="Male", language="en")
    total_en_f = await qc.count_users_sex_language(sex="Female", language="en")
    total_es = await qc.count_users_language(language="es")
    total_es_m = await qc.count_users_sex_language(sex="Male", language="es")
    total_es_f = await qc.count_users_sex_language(sex="Female", language="es")
    total_de = await qc.count_users_language(language="de")
    total_de_m = await qc.count_users_sex_language(sex="Male", language="de")
    total_de_f = await qc.count_users_sex_language(sex="Female", language="de")
    referrals = await qc.count_users_referrers()
    await call.message.edit_text(f"üë©‚Äçüë¶‚Äçüë¶–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                                 f"üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_female}\n"
                                 f"üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_male}\n"
                                 f"\n"
                                 f"üá∑üá∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_ru}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_ru_f}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_ru_m}\n"
                                 f"\n"
                                 f"üá∫üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_en}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_en_f}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_en_m}\n"
                                 f"\n"
                                 f"üá™üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_es}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_es_f}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_es_m}\n"
                                 f"\n"
                                 f"üá©üá™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_de}\n"
                                 f"üá©üá™üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_de_f}\n"
                                 f"üá©üá™üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_de_m}\n", reply_markup=SU_msg_language_kb)
    await SU.msg_via_date.set()


@dp.callback_query_handler(Text(equals=["SU_msg_ru_all", "SU_msg_ru_female", "SU_msg_ru_male",
                                        "SU_msg_en_all", "SU_msg_en_female", "SU_msg_en_male",
                                        "SU_msg_es_all", "SU_msg_es_female", "SU_msg_es_male",
                                        "SU_msg_de_all", "SU_msg_de_female", "SU_msg_de_male"]), state=SU.msg_via_date)
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    type_people = call.data
    if type_people == "SU_msg_ru_all":
        people = await qc.get_users_language(language="ru")
        text = "—Å —è–∑—ã–∫–æ–º RU (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "ru"
        sex = "All"
    if type_people == "SU_msg_en_all":
        people = await qc.get_users_language(language="en")
        text = "—Å —è–∑—ã–∫–æ–º EN (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "en"
        sex = "All"
    if type_people == "SU_msg_es_all":
        people = await qc.get_users_language(language="es")
        text = "—Å —è–∑—ã–∫–æ–º ES (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "es"
        sex = "All"
    if type_people == "SU_msg_de_all":
        people = await qc.get_users_language(language="de")
        text = "—Å —è–∑—ã–∫–æ–º DE (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "de"
        sex = "All"
    if type_people == "SU_msg_ru_female":
        people = await qc.get_users_language_and_sex(language="ru", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º RU (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "ru"
        sex = "Female"
    if type_people == "SU_msg_en_female":
        people = await qc.get_users_language_and_sex(language="en", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º EN (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "en"
        sex = "Female"
    if type_people == "SU_msg_es_female":
        people = await qc.get_users_language_and_sex(language="es", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º ES (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "es"
        sex = "Female"
    if type_people == "SU_msg_de_female":
        people = await qc.get_users_language_and_sex(language="de", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º DE (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "de"
        sex = "Female"
    if type_people == "SU_msg_ru_male":
        people = await qc.get_users_language_and_sex(language="ru", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º RU (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "ru"
        sex = "Male"
    if type_people == "SU_msg_en_male":
        people = await qc.get_users_language_and_sex(language="en", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º EN (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "en"
        sex = "Male"
    if type_people == "SU_msg_es_male":
        people = await qc.get_users_language_and_sex(language="es", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º ES (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "es"
        sex = "Male"
    if type_people == "SU_msg_de_male":
        people = await qc.get_users_language_and_sex(language="de", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º DE (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "de"
        sex = "Male"
    x = 0
    for man in people:
        x += 1
    if x == 0:
        await call.message.edit_text(f"–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ª—é–¥–µ–π –Ω–µ—Ç.\n"
                                     f"–ò–∑–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞", reply_markup=SU_msg_language_kb)
    else:
        await call.message.edit_text(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–¥—è–º {text}.\n"
                                     f"\n"
                                     f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 16.10", reply_markup=SU_to_main_kb)
        await state.update_data(people=f" –ª—é–¥—è–º {text}", language=language, sex=sex)
        await SU.msg_select_date.set()


@dp.message_handler(state=SU.msg_select_date)
async def def_name(message: types.Message, state: FSMContext):
        date = message.text
        try:
            try:
                date = date.replace(".", " ")
            except:
                pass
            try:
                date = date.replace(",", " ")
            except:
                pass
            try:
                date = date.replace("/", " ")
            except:
                pass
            date = date.split()
            day = date[0]
            month = date[1]
            data = await state.get_data()
            language = data.get("language")
            people = data.get("people")
            sex = data.get("sex")
            if sex in ("Female", "Male"):
                users = await qc.get_users_language_and_date_and_sex(language=language, sex=sex, day=str(day), month=str(month))
            else:
                users = await qc.get_users_language_date_no_sex(language=language, day=str(day), month=str(month))
            qty = 0
            for user in users:
                qty += 1
            if qty == 0:
                await message.answer(f"üî¥–õ—é–¥–µ–π {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å {day}.{month} –ù–ï–¢\n"
                                      f"\n"
                                      f"–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=SU_to_main_kb)
            else:
                await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å {day}.{month} (–¢–∞–∫–∏—Ö –ª—é–¥–µ–π {qty} —à—Ç)\n"
                                     f"\n"
                                     f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                     f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç", reply_markup=SU_to_main_kb)
                await state.update_data(users=users, date=date, qty=qty)
                await SU.msg_text_date.set()
        except:
            await message.answer(f"–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É. –£–∫–∞–∂–∏—Ç–µ –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 16,10 –∏–ª–∏ 16.10 –∏–ª–∏ 16/10 –∏–ª–∏ 16 10", reply_markup=SU_to_main_kb)


@dp.message_handler(content_types=ContentTypes.TEXT, state=SU.msg_text_date)
async def def_name(message: types.Message, state: FSMContext):
    msg = message.text
    data = await state.get_data()
    people = data.get("people")
    type_age = data.get("type_age")
    year = data.get("year")
    qty = data.get("qty")
    sex = data.get("sex")
    language = data.get("language")
    date = data.get("date")
    if sex == "Female":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –∂–µ–Ω—â–∏–Ω–∞–º —Å —è–∑—ã–∫–æ–º {language}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å {date[0]}.{date[1]}\n"
                                 f"\n"
                                 f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:", reply_markup=SU_to_main_kb)
    if sex == "Male":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –º—É–∂—á–∏–Ω–∞–º —Å —è–∑—ã–∫–æ–º {language}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å {date[0]}.{date[1]}\n"
                                 f"\n"
                                 f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:", reply_markup=SU_to_main_kb)
    await message.answer(f"{msg}")
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=SU_accept_send_kb)
    await state.update_data(photo_or_text="text", msg=msg)


@dp.message_handler(content_types=ContentTypes.PHOTO, state=SU.msg_text_date)
async def def_name(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    msg = message.caption
    data = await state.get_data()
    sex = data.get("sex")
    language = data.get("language")
    qty = data.get("qty")
    date = data.get("date")
    if sex == "Female":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –∂–µ–Ω—â–∏–Ω–∞–º —Å —è–∑—ã–∫–æ–º {language}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å {date[0]}.{date[1]}\n"
                                 f"\n"
                                 f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:", reply_markup=SU_to_main_kb)
    if sex == "Male":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –º—É–∂—á–∏–Ω–∞–º —Å —è–∑—ã–∫–æ–º {language}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å {date[0]}.{date[1]}\n"
                                 f"\n"
                                 f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:", reply_markup=SU_to_main_kb)
    if msg is None:
        await message.answer_photo(photo=photo)
    else:
        await message.answer_photo(photo=photo, caption=f"{msg}")
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=SU_accept_send_kb)
    await state.update_data(photo_or_text="photo", photo=photo, msg=msg)


@dp.callback_query_handler(text="su_send_msg_accept", state=SU.msg_text_date)
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"–ù–∞—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                                 f"\n"
                                 f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ")
    data = await state.get_data()
    users = data.get("users")
    photo_or_text = data.get("photo_or_text")
    if photo_or_text == "text":
        msg = data.get("msg")
        for user in users:
            try:
                await bot.send_message(chat_id=user.id, text=msg)
            except:
                pass
        await call.message.edit_text(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", reply_markup=SU_to_main_kb)
    if photo_or_text == "photo":
        photo = data.get("photo")
        msg = data.get("msg")
        for user in users:
            try:
                if msg is None:
                    await bot.send_photo(chat_id=user.id, photo=photo)
                else:
                    await bot.send_photo(chat_id=user.id, photo=photo, caption=msg)
            except:
                pass
        await call.message.edit_text(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", reply_markup=SU_to_main_kb)
    await state.finish()


@dp.callback_query_handler(text="SU_msg_age")
async def def_mame(call: types.CallbackQuery):
    total_users = await qc.count_users()
    total_male = await qc.count_users_sex(sex="Male")
    total_female = await qc.count_users_sex(sex="Female")
    total_ru = await qc.count_users_language(language="ru")
    total_ru_m = await qc.count_users_sex_language(sex="Male", language="ru")
    total_ru_f = await qc.count_users_sex_language(sex="Female", language="ru")
    total_en = await qc.count_users_language(language="en")
    total_en_m = await qc.count_users_sex_language(sex="Male", language="en")
    total_en_f = await qc.count_users_sex_language(sex="Female", language="en")
    total_es = await qc.count_users_language(language="es")
    total_es_m = await qc.count_users_sex_language(sex="Male", language="es")
    total_es_f = await qc.count_users_sex_language(sex="Female", language="es")
    total_de = await qc.count_users_language(language="de")
    total_de_m = await qc.count_users_sex_language(sex="Male", language="de")
    total_de_f = await qc.count_users_sex_language(sex="Female", language="de")
    referrals = await qc.count_users_referrers()
    await call.message.edit_text(f"üë©‚Äçüë¶‚Äçüë¶–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                                 f"üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_female}\n"
                                 f"üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_male}\n"
                                 f"\n"
                                 f"üá∑üá∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_ru}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_ru_f}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_ru_m}\n"
                                 f"\n"
                                 f"üá∫üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_en}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_en_f}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_en_m}\n"
                                 f"\n"
                                 f"üá™üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_es}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_es_f}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_es_m}\n"
                                 f"\n"
                                 f"üá©üá™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_de}\n"
                                 f"üá©üá™üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_de_f}\n"
                                 f"üá©üá™üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_de_m}\n", reply_markup=SU_msg_language_kb)
    await SU.msg_via_age.set()


@dp.callback_query_handler(Text(equals=["SU_msg_ru_all", "SU_msg_ru_female", "SU_msg_ru_male",
                                        "SU_msg_en_all", "SU_msg_en_female", "SU_msg_en_male",
                                        "SU_msg_es_all", "SU_msg_es_female", "SU_msg_es_male",
                                        "SU_msg_de_all", "SU_msg_de_female", "SU_msg_de_male"]), state=SU.msg_via_age)
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    type_people = call.data
    if type_people == "SU_msg_ru_all":
        people = await qc.get_users_language(language="ru")
        text = "—Å —è–∑—ã–∫–æ–º RU (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "ru"
        sex = "All"
    if type_people == "SU_msg_en_all":
        people = await qc.get_users_language(language="en")
        text = "—Å —è–∑—ã–∫–æ–º EN (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "en"
        sex = "All"
    if type_people == "SU_msg_es_all":
        people = await qc.get_users_language(language="es")
        text = "—Å —è–∑—ã–∫–æ–º ES (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "es"
        sex = "All"
    if type_people == "SU_msg_de_all":
        people = await qc.get_users_language(language="de")
        text = "—Å —è–∑—ã–∫–æ–º DE (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "de"
        sex = "All"
    if type_people == "SU_msg_ru_female":
        people = await qc.get_users_language_and_sex(language="ru", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º RU (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "ru"
        sex = "Female"
    if type_people == "SU_msg_en_female":
        people = await qc.get_users_language_and_sex(language="en", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º EN (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "en"
        sex = "Female"
    if type_people == "SU_msg_es_female":
        people = await qc.get_users_language_and_sex(language="es", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º ES (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "es"
        sex = "Female"
    if type_people == "SU_msg_de_female":
        people = await qc.get_users_language_and_sex(language="de", sex="Female")
        text = "—Å —è–∑—ã–∫–æ–º DE (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
        language = "de"
        sex = "Female"
    if type_people == "SU_msg_ru_male":
        people = await qc.get_users_language_and_sex(language="ru", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º RU (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "ru"
        sex = "Male"
    if type_people == "SU_msg_en_male":
        people = await qc.get_users_language_and_sex(language="en", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º EN (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "en"
        sex = "Male"
    if type_people == "SU_msg_es_male":
        people = await qc.get_users_language_and_sex(language="es", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º ES (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "es"
        sex = "Male"
    if type_people == "SU_msg_de_male":
        people = await qc.get_users_language_and_sex(language="de", sex="Male")
        text = "—Å —è–∑—ã–∫–æ–º DE (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
        language = "de"
        sex = "Male"
    x = 0
    for man in people:
        x += 1
    if x == 0:
        await call.message.edit_text(f"–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ª—é–¥–µ–π –Ω–µ—Ç.\n"
                                     f"–ò–∑–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞", reply_markup=SU_msg_language_kb)
    else:
        await call.message.edit_text(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–¥—è–º {text}.\n"
                                     f"\n"
                                     f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", reply_markup=SU_via_age_kb)
        await state.update_data(people=f" –ª—é–¥—è–º {text}", language=language, sex=sex)


@dp.callback_query_handler(Text(equals=["after_age", "before_age", "select_age"]), state=SU.msg_via_age)
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    people = data.get("people")
    type_age = call.data
    if type_age == "after_age":
        await call.message.edit_text(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –•–•–•–• –≥–æ–¥–∞.\n"
                                  f"\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥\n"
                                  f"–ù–∞–ø—Ä–∏–º–µ—Ä 2000 - –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º, –∫—Ç–æ —Ä–æ–¥–∏–ª—Å—è –≤ 2000, 2001, 2002... (—Ç–æ –µ—Å—Ç—å –º–ª–∞–¥—à–µ 21 –≥–æ–¥–∞)", reply_markup=SU_to_main_kb)
        await state.update_data(type_age="after_age")
    if type_age == "before_age":
        await call.message.edit_text(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å —Ä–∞–Ω—å—à–µ –•–•–•–• –≥–æ–¥–∞.\n"
                                  f"\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥\n"
                                  f"–ù–∞–ø—Ä–∏–º–µ—Ä 2000 - –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º, –∫—Ç–æ —Ä–æ–¥–∏–ª—Å—è –≤ 2000, 1999, 1998... (—Ç–æ –µ—Å—Ç—å —Å—Ç–∞—Ä—à–µ 21 –≥–æ–¥–∞)", reply_markup=SU_to_main_kb)
        await state.update_data(type_age="before_age")
    if type_age == "select_age":
        await call.message.edit_text(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –≤ –•–•–•–• –≥–æ–¥.\n"
                                  f"\n"
                                  f"–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥\n"
                                  f"–ù–∞–ø—Ä–∏–º–µ—Ä 2000 - –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º, –∫—Ç–æ —Ä–æ–¥–∏–ª—Å—è –≤ 2000 –≥–æ–¥—É", reply_markup=SU_to_main_kb)
        await state.update_data(type_age="select_age")
    await SU.msg_select_age.set()



@dp.message_handler(state=SU.msg_select_age)
async def def_name(message: types.Message, state: FSMContext):
    year = message.text
    try:
        year = int(year)
        data = await state.get_data()
        type_age = data.get("type_age")
        people = data.get("people")
        language = data.get("language")
        sex = data.get("sex")
        if type_age == "after_age":
            if sex in ("Female", "Male"):
                users = await qc.get_users_language_and_age_after(language=language, sex=sex, year=str(year))
            else:
                users = await qc.get_users_language_and_age_after_no_sex(language=language, year=str(year))
            qty = 0
            for user in users:
                qty += 1
            if qty == 0:
                await message.answer(f"üî¥–õ—é–¥–µ–π {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –ø–æ—Å–ª–µ {year} –≥–æ–¥–∞ –ù–ï–¢\n"
                                      f"\n"
                                      f"–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=SU_to_main_kb)
            else:
                await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –ø–æ—Å–ª–µ {year} –≥–æ–¥–∞ (–¢–∞–∫–∏—Ö –ª—é–¥–µ–π {qty} —à—Ç)\n"
                                     f"\n"
                                     f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                     f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç", reply_markup=SU_to_main_kb)
                await state.update_data(users=users, year=year, qty=qty)
                await SU.msg_text_age.set()
        if type_age == "before_age":
            if sex in ("Female", "Male"):
                users = await qc.get_users_language_and_age_before(language=language, sex=sex, year=str(year))
            else:
                users = await qc.get_users_language_and_age_before_no_sex(language=language, year=str(year))
            qty = 0
            for user in users:
                qty += 1
            if qty == 0:
                await message.answer(f"üî¥–õ—é–¥–µ–π {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –¥–æ {year} –≥–æ–¥–∞ –ù–ï–¢\n"
                                      f"\n"
                                      f"–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=SU_to_main_kb)
            else:
                await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –¥–æ {year} –≥–æ–¥–∞ (–¢–∞–∫–∏—Ö –ª—é–¥–µ–π {qty} —à—Ç)\n"
                                     f"\n"
                                     f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                     f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç", reply_markup=SU_to_main_kb)
                await state.update_data(users=users, year=year, qty=qty)
                await SU.msg_text_age.set()
        if type_age == "select_age":
            if sex in ("Female", "Male"):
                users = await qc.get_users_language_and_age_select(language=language, sex=sex, year=str(year))
            else:
                users = await qc.get_users_language_and_age_select_no_sex(language=language, year=str(year))
            qty = 0
            for user in users:
                qty += 1
            if qty == 0:
                await message.answer(f"üî¥–õ—é–¥–µ–π {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –≤ {year} –≥–æ–¥ –≥–æ–¥–∞ –ù–ï–¢\n"
                                      f"\n"
                                      f"–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=SU_to_main_kb)
            else:
                await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –≤ {year} –≥–æ–¥ (–¢–∞–∫–∏—Ö –ª—é–¥–µ–π {qty} —à—Ç)\n"
                                     f"\n"
                                     f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                     f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç", reply_markup=SU_to_main_kb)
                await state.update_data(users=users, year=year, qty=qty)
                await SU.msg_text_age.set()
    except:
        await message.answer(f"–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≥–æ–¥. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1995", reply_markup=SU_to_main_kb)


@dp.message_handler(content_types=ContentTypes.TEXT, state=SU.msg_text_age)
async def def_name(message: types.Message, state: FSMContext):
    msg = message.text
    data = await state.get_data()
    people = data.get("people")
    type_age = data.get("type_age")
    year = data.get("year")
    qty = data.get("qty")

    if type_age == "after_age":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –ø–æ—Å–ª–µ {year} –≥–æ–¥–∞\n"
                             f"\n"
                             f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:", reply_markup=SU_to_main_kb)
    if type_age == "before_age":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –¥–æ {year} –≥–æ–¥–∞\n"
                             f"\n"
                             f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:",
                             reply_markup=SU_to_main_kb)
    if type_age == "select_age":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –≤ {year} –≥–æ–¥\n"
                             f"\n"
                             f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:",
                             reply_markup=SU_to_main_kb)
    await message.answer(f"{msg}")
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=SU_accept_send_kb)
    await state.update_data(photo_or_text="text", msg=msg)


@dp.message_handler(content_types=ContentTypes.PHOTO, state=SU.msg_text_age)
async def def_name(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    msg = message.caption
    data = await state.get_data()
    people = data.get("people")
    type_age = data.get("type_age")
    year = data.get("year")
    qty = data.get("qty")
    if type_age == "after_age":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –ø–æ—Å–ª–µ {year} –≥–æ–¥–∞\n"
                             f"\n"
                             f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:", reply_markup=SU_to_main_kb)
    if type_age == "before_age":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –¥–æ {year} –≥–æ–¥–∞\n"
                             f"\n"
                             f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:",
                             reply_markup=SU_to_main_kb)
    if type_age == "select_age":
        await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {qty} –ª—é–¥—è–º {people}, –∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–¥–∏–ª–∏—Å—å –≤ {year} –≥–æ–¥\n"
                             f"\n"
                             f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:",
                             reply_markup=SU_to_main_kb)
    if msg is None:
        await message.answer_photo(photo=photo)
    else:
        await message.answer_photo(photo=photo, caption=f"{msg}")
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=SU_accept_send_kb)
    await state.update_data(photo_or_text="photo", photo=photo, msg=msg)


@dp.callback_query_handler(text="su_send_msg_accept", state=SU.msg_text_age)
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"–ù–∞—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                                 f"\n"
                                 f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ")
    data = await state.get_data()
    users = data.get("users")
    photo_or_text = data.get("photo_or_text")
    if photo_or_text == "text":
        msg = data.get("msg")
        for user in users:
            try:
                await bot.send_message(chat_id=user.id, text=msg)
            except:
                pass
        await call.message.edit_text(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", reply_markup=SU_to_main_kb)
    if photo_or_text == "photo":
        photo = data.get("photo")
        msg = data.get("msg")
        for user in users:
            try:
                if msg is None:
                    await bot.send_photo(chat_id=user.id, photo=photo)
                else:
                    await bot.send_photo(chat_id=user.id, photo=photo, caption=msg)
            except:
                pass
        await call.message.edit_text(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", reply_markup=SU_to_main_kb)
    await state.finish()


@dp.callback_query_handler(text="SU_msg_language")
async def def_mame(call: types.CallbackQuery):
    total_users = await qc.count_users()
    total_male = await qc.count_users_sex(sex="Male")
    total_female = await qc.count_users_sex(sex="Female")
    total_ru = await qc.count_users_language(language="ru")
    total_ru_m = await qc.count_users_sex_language(sex="Male", language="ru")
    total_ru_f = await qc.count_users_sex_language(sex="Female", language="ru")
    total_en = await qc.count_users_language(language="en")
    total_en_m = await qc.count_users_sex_language(sex="Male", language="en")
    total_en_f = await qc.count_users_sex_language(sex="Female", language="en")
    total_es = await qc.count_users_language(language="es")
    total_es_m = await qc.count_users_sex_language(sex="Male", language="es")
    total_es_f = await qc.count_users_sex_language(sex="Female", language="es")
    total_de = await qc.count_users_language(language="de")
    total_de_m = await qc.count_users_sex_language(sex="Male", language="de")
    total_de_f = await qc.count_users_sex_language(sex="Female", language="de")
    referrals = await qc.count_users_referrers()
    await call.message.edit_text(f"üë©‚Äçüë¶‚Äçüë¶–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                                 f"üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_female}\n"
                                 f"üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_male}\n"
                                 f"\n"
                                 f"üá∑üá∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_ru}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_ru_f}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_ru_m}\n"
                                 f"\n"
                                 f"üá∫üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_en}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_en_f}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_en_m}\n"
                                 f"\n"
                                 f"üá™üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_es}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_es_f}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_es_m}\n"
                                 f"\n"
                                 f"üá©üá™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_de}\n"
                                 f"üá©üá™üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_de_f}\n"
                                 f"üá©üá™üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_de_m}\n", reply_markup=SU_msg_language_kb)
    await SU.msg_via_language.set()


@dp.callback_query_handler(Text(equals=["SU_msg_ru_all", "SU_msg_ru_female", "SU_msg_ru_male",
                                        "SU_msg_en_all", "SU_msg_en_female", "SU_msg_en_male",
                                        "SU_msg_es_all", "SU_msg_es_female", "SU_msg_es_male",
                                        "SU_msg_de_all", "SU_msg_de_female", "SU_msg_de_male"]), state=SU.msg_via_language)
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    type_people = call.data
    if type_people == "SU_msg_ru_all":
        people = await qc.get_users_language(language="ru")
        text = "–° —è–∑—ã–∫–æ–º RU (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_en_all":
        people = await qc.get_users_language(language="en")
        text = "–° —è–∑—ã–∫–æ–º EN (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_es_all":
        people = await qc.get_users_language(language="es")
        text = "–° —è–∑—ã–∫–æ–º ES (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_de_all":
        people = await qc.get_users_language(language="de")
        text = "–° —è–∑—ã–∫–æ–º DE (–∏ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_ru_female":
        people = await qc.get_users_language_and_sex(language="ru", sex="Female")
        text = "–° —è–∑—ã–∫–æ–º RU (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_en_female":
        people = await qc.get_users_language_and_sex(language="en", sex="Female")
        text = "–° —è–∑—ã–∫–æ–º EN (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_es_female":
        people = await qc.get_users_language_and_sex(language="es", sex="Female")
        text = "–° —è–∑—ã–∫–æ–º ES (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_de_female":
        people = await qc.get_users_language_and_sex(language="de", sex="Female")
        text = "–° —è–∑—ã–∫–æ–º DE (—Ç–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω–∞–º)"
    if type_people == "SU_msg_ru_male":
        people = await qc.get_users_language_and_sex(language="ru", sex="Male")
        text = "–° —è–∑—ã–∫–æ–º RU (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
    if type_people == "SU_msg_en_male":
        people = await qc.get_users_language_and_sex(language="en", sex="Male")
        text = "–° —è–∑—ã–∫–æ–º EN (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
    if type_people == "SU_msg_es_male":
        people = await qc.get_users_language_and_sex(language="es", sex="Male")
        text = "–° —è–∑—ã–∫–æ–º ES (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
    if type_people == "SU_msg_de_male":
        people = await qc.get_users_language_and_sex(language="de", sex="Male")
        text = "–° —è–∑—ã–∫–æ–º DE (—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω–∞–º)"
    x = 0
    for man in people:
        x += 1
    if x == 0:
        await call.message.edit_text(f"–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ª—é–¥–µ–π –Ω–µ—Ç.\n"
                                     f"–ò–∑–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞", reply_markup=SU_msg_language_kb)
    else:
        await call.message.edit_text(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {x} –ª—é–¥—è–º, {text}.\n"
                                     f"\n"
                                     f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                                     f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç\n"
                                     f"\n"
                                     f"–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=SU_to_main_kb)
        await state.update_data(people=f"{x} –ª—é–¥—è–º, {text}", users=people)


@dp.message_handler(content_types=ContentTypes.TEXT, state=SU.msg_via_language)
async def def_name(message: types.Message, state: FSMContext):
    msg = message.text
    data = await state.get_data()
    people = data.get("people")
    await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {people} —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                         f"\n"
                         f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:")
    await message.answer(f"{msg}")
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=SU_accept_send_kb)
    await state.update_data(photo_or_text="text", msg=msg)


@dp.message_handler(content_types=ContentTypes.PHOTO, state=SU.msg_via_language)
async def def_name(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    msg = message.caption
    data = await state.get_data()
    people = data.get("people")
    await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {people} —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                         f"\n"
                         f"–û–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:")
    if msg is None:
        await message.answer_photo(photo=photo)
    else:
        await message.answer_photo(photo=photo, caption=f"{msg}")
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=SU_accept_send_kb)
    await state.update_data(photo_or_text="photo", photo=photo, msg=msg)


@dp.message_handler(content_types=ContentTypes.ANY, state=SU.msg_via_language)
async def def_name(message: types.Message, state: FSMContext):
    await message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n"
                         f"\n"
                         f"–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=SU_to_main_kb)


@dp.callback_query_handler(text="su_send_msg_accept", state=SU.msg_via_language)
async def def_mame(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"–ù–∞—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                                 f"\n"
                                 f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ")
    data = await state.get_data()
    users = data.get("users")
    photo_or_text = data.get("photo_or_text")
    if photo_or_text == "text":
        msg = data.get("msg")
        for user in users:
            try:
                await bot.send_message(chat_id=user.id, text=msg)
            except:
                pass
        await call.message.edit_text(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", reply_markup=SU_to_main_kb)
    if photo_or_text == "photo":
        photo = data.get("photo")
        msg = data.get("msg")
        for user in users:
            try:
                if msg is None:
                    await bot.send_photo(chat_id=user.id, photo=photo)
                else:
                    await bot.send_photo(chat_id=user.id, photo=photo, caption=msg)
            except:
                pass
        await call.message.edit_text(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", reply_markup=SU_to_main_kb)
    await state.finish()


@dp.callback_query_handler(text="stat")
async def def_mame(call: types.CallbackQuery):
    total_users = await qc.count_users()
    total_male = await qc.count_users_sex(sex="Male")
    total_female = await qc.count_users_sex(sex="Female")
    total_ru = await qc.count_users_language(language="ru")
    total_ru_m = await qc.count_users_sex_language(sex="Male", language="ru")
    total_ru_f = await qc.count_users_sex_language(sex="Female", language="ru")
    total_en = await qc.count_users_language(language="en")
    total_en_m = await qc.count_users_sex_language(sex="Male", language="en")
    total_en_f = await qc.count_users_sex_language(sex="Female", language="en")
    total_es = await qc.count_users_language(language="es")
    total_es_m = await qc.count_users_sex_language(sex="Male", language="es")
    total_es_f = await qc.count_users_sex_language(sex="Female", language="es")
    total_de = await qc.count_users_language(language="de")
    total_de_m = await qc.count_users_sex_language(sex="Male", language="de")
    total_de_f = await qc.count_users_sex_language(sex="Female", language="de")
    referrals = await qc.count_users_referrers()
    await call.message.edit_text(f"üë©‚Äçüë¶‚Äçüë¶–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                                 f"üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_female}\n"
                                 f"üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_male}\n"
                                 f"\n"
                                 f"üá∑üá∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_ru}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_ru_f}\n"
                                 f"üá∑üá∫üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_ru_m}\n"
                                 f"\n"
                                 f"üá∫üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_en}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_en_f}\n"
                                 f"üá∫üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_en_m}\n"
                                 f"\n"
                                 f"üá™üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_es}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_es_f}\n"
                                 f"üá™üá∏üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_es_m}\n"
                                 f"\n"
                                 f"üá©üá™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_de}\n"
                                 f"üá©üá™üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω: {total_de_f}\n"
                                 f"üá©üá™üôç‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω: {total_de_m}\n"
                                 f"\n"
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª—é–¥–µ–π: {referrals}\n"
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—à–ª–∏ –±–æ—Ç–∞ —Å–∞–º–∏: {total_users - referrals}", reply_markup=main_SU_kb)

